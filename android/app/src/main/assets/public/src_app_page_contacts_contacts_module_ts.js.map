{"version":3,"file":"src_app_page_contacts_contacts_module_ts.js","mappings":"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","sources":["./src/app/page/contacts/contacts-routing.module.ts","./src/app/page/contacts/contacts.module.ts","./src/app/page/contacts/contacts.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ContactsPage } from './contacts.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ContactsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ContactsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule,  } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { ContactsPageRoutingModule } from './contacts-routing.module';\nimport { ContactsPage } from './contacts.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ContactsPageRoutingModule,\n    ReactiveFormsModule\n  ],\n  declarations: [ContactsPage]\n})\nexport class ContactsPageModule {}\n","import { Component, OnInit } from '@angular/core';\n\n// Importa dependências\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';   // Classes do Reactive forms\nimport { Router } from '@angular/router';                              // Roteamento\nimport { AlertController } from '@ionic/angular';                      // Caixa de alerta do Ionic\nimport { initializeApp } from 'firebase/app';                          // Firebase\nimport { addDoc, collection, getFirestore } from 'firebase/firestore'; // Firestore\nimport { environment } from 'src/environments/environment';            // Configurações do app\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\n\n@Component({\n  selector: 'app-contacts',\n  templateUrl: './contacts.page.html',\n  styleUrls: ['./contacts.page.scss'],\n})\nexport class ContactsPage implements OnInit {\n\n  // Recebe o formulário\n  contactForm: FormGroup;\n\n  // Armazena documento para o Firestore\n  contactData: any;\n\n  // Armazena metadados do usuário logado\n  user = {};\n\n  // Conexão com Firebase. Observe o uso da chave de 'environment'\n  app = initializeApp(environment.firebase);\n\n  // Conexão com Firestore\n  db = getFirestore();\n\n  constructor(\n\n    // Injeta dependências\n    private fb: FormBuilder,                  // Objeto do formulário\n    private alertController: AlertController, // Objeto da caixa de alerta\n    private router: Router,                    // Objeto que faz redirecionamento de rota\n    private auth: AngularFireAuth\n  ) { }\n\n  ngOnInit() {\n\n    // Cria formulário\n    this.createForm();\n\n    // Testa se tem usuário logado\n    this.auth.authState.subscribe((user) => {\n\n      // Se tem alguém logado\n      if (user) {\n\n        // Monta metadados do usuário\n        this.user = {\n          name: user.displayName,\n          email: user.email,\n          photo: user.photoURL,\n          uid: user.uid,\n          status: 'logged'\n        };\n\n        // Campos nome e e-mail já vem preenchidos\n        this.contactForm.reset({\n          name: user.displayName,\n          email: user.email,\n        });\n\n        // Ninguém logado\n      } else {\n\n        // Monta metadados do usuário\n        this.user = {\n          status: 'not logged'\n        };\n      }\n    });\n  }\n\n  // Função que cria o formulário\n  createForm() {\n    this.contactForm = this.fb.group({\n      name: ['',     // Valor inicial do campo\n        [\n          Validators.required,    // Campo obrigatório\n          Validators.minLength(3) // Pelo menos 3 caracteres\n        ]\n      ],\n      email: ['',    // Valor inicial do campo\n        [\n          Validators.required, // Campo obrigatório\n          Validators.email     // Deve ser um endereço de e-mail\n        ]\n      ],\n      subject: ['',  // Valor inicial do campo\n        [\n          Validators.required,    // Campo obrigatório\n          Validators.minLength(5) // Pelo menos 5 caracteres\n        ]\n      ],\n      message: ['', // Valor inicial do campo\n        [\n          Validators.required,      // Campo obrigatório\n          Validators.minLength(5)   // Pelo menos 5 caracteres\n        ]\n      ]\n    });\n  }\n\n  // Processa envio do formulário\n  async submitForm() {\n\n    // Se o formulário tem erros ao enviar...\n    if (this.contactForm.invalid) {\n\n      // Exibe caixa de alerta\n      this.presentAlert(\n        'Ooooops!',\n        'Preencha todos os campos antes de enviar...',\n        false\n      );\n\n      // Se formulário está ok...\n    } else {\n\n      // Formata os campos do documento do Firebase Firestore\n      this.contactData = this.contactForm.value;  // Dados do formulário\n      this.contactData.date = this.nowDatetime(); // Data atual já formatada\n      this.contactData.status = 'recebido';       // Status do contato\n      this.contactData.usermeta = this.user;      // Dados do usuário, se logado\n\n      // Armazena documento na coleção 'contact' do Firestore\n      await addDoc(collection(this.db, 'contact'), this.contactData)\n\n        // Se deu certo...\n        .then(() => {\n\n          // Extrai primeiro nome do remetente\n          const firstName = this.contactForm.value.name.split(' ')[0];\n\n          // Exibe caixa de alerta\n          this.presentAlert(\n            `Olá ${firstName}!`,\n            'Seu contato foi enviado com sucesso.<br><br>Obrigado...',\n            true // Força recirecionamento\n          );\n        })\n\n        // Se deu errado...\n        .catch(() => {\n\n          // Exibe caixa de alerta\n          this.presentAlert(\n            'Ooooops!',\n            'ocorreu um erro ao enviar seu contato.<br><br>Por favor, tente mais tarde...',\n            false\n          );\n        });\n    }\n  }\n\n  // Função que exibe caixa de alerta\n  async presentAlert(alertHeader: string, alertMessage: string, alertRedirect: boolean) {\n    const alert = await this.alertController.create({\n      header: alertHeader,\n      message: alertMessage,\n      buttons: [{\n        text: 'OK',\n        handler: () => {\n\n          // Se solicitou redirecionamento...\n          if (alertRedirect) {\n\n            // Limpar campos do formulário\n            this.contactForm.markAsPristine();\n\n            // Preenche campos 'name' e 'email' com os valores atuais\n            this.contactForm.reset({\n              name: this.contactForm.value.name,\n              email: this.contactForm.value.email\n            });\n\n            // Redireciona para a página inicial\n            this.router.navigate(['/inicio']);\n\n            // Se não solicitou redirecionamento...\n          } else {\n\n            // Somente fecha o alert\n            return true;\n          }\n        }\n      }]\n    });\n    await alert.present();\n  }\n\n  // Função que gera a data atual no formato 'YYYY-MM-DD HH:II:SS'\n  nowDatetime() {\n    let yourDate = new Date(); // Obtém a data atual\n    yourDate = new Date(yourDate.getTime() - (yourDate.getTimezoneOffset() * 60 * 1000)); // Ajusta o 'timezone'\n    const dateParts = yourDate.toISOString().split('T'); // Extrai partes da data\n    const timeParts = dateParts[1].split('.')[0]; // Remove timezone da hora\n    return dateParts[0] + ' ' + timeParts; // Formata a data\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///"}